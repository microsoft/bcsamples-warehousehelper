name: ' Publish To Environment'

on:
  workflow_dispatch:
    inputs:
      appVersion:
        description: App version to deploy to environment(s) (current, prerelease, draft, latest or version number)
        required: false
        default: 'current'
      environmentName:
        description: Environment mask to receive the new version (* for all, PROD* for all environments starting with PROD)
        required: true

permissions:
  contents: read
  actions: read

defaults:
  run:
    shell: powershell

env:
  ALGoOrgSettings: ${{ vars.ALGoOrgSettings }}
  ALGoRepoSettings: ${{ vars.ALGoRepoSettings }}

jobs:
  Initialization:
    needs: [ ]
    runs-on: [ windows-latest ]
    outputs:
      telemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
      environmentsMatrixJson: ${{ steps.DetermineDeploymentEnvironments.outputs.EnvironmentsMatrixJson }}
      environmentCount: ${{ steps.DetermineDeploymentEnvironments.outputs.EnvironmentCount }}
      deploymentEnvironmentsJson: ${{ steps.DetermineDeploymentEnvironments.outputs.DeploymentEnvironmentsJson }}
      deviceCode: ${{ steps.Authenticate.outputs.deviceCode }}
    steps:
      - name: Dump Workflow Information
        uses: andersgMSFT/AL-Go-Actions/DumpWorkflowInfo@PPP
        with:
          shell: powershell

      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize the workflow
        id: init
        uses: andersgMSFT/AL-Go-Actions/WorkflowInitialize@PPP
        with:
          shell: powershell
          eventId: "DO0097"

      - name: Read settings
        id: ReadSettings
        uses: andersgMSFT/AL-Go-Actions/ReadSettings@PPP
        with:
          shell: powershell

      - name: Determine Deployment Environments
        id: DetermineDeploymentEnvironments
        uses: andersgMSFT/AL-Go-Actions/DetermineDeploymentEnvironments@PPP
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          shell: powershell
          getEnvironments: ${{ github.event.inputs.environmentName }}
          type: 'Publish'

      - name: EnvName
        id: envName
        if: steps.DetermineDeploymentEnvironments.outputs.UnknownEnvironment == 1
        run: |
          $errorActionPreference = "Stop"; $ProgressPreference = "SilentlyContinue"; Set-StrictMode -Version 2.0
          $envName = '${{ fromJson(steps.DetermineDeploymentEnvironments.outputs.environmentsMatrixJson).matrix.include[0].environment }}'.split(' ')[0]
          Add-Content -Encoding UTF8 -Path $env:GITHUB_OUTPUT -Value "envName=$envName"

      - name: Read secrets
        id: ReadSecrets
        uses: andersgMSFT/AL-Go-Actions/ReadSecrets@PPP
        if: steps.DetermineDeploymentEnvironments.outputs.UnknownEnvironment == 1
        with:
          shell: powershell
          gitHubSecrets: ${{ toJson(secrets) }}
          getSecrets: '${{ steps.envName.outputs.envName }}-AuthContext,${{ steps.envName.outputs.envName }}_AuthContext,AuthContext'

      - name: Authenticate
        id: Authenticate
        if: steps.DetermineDeploymentEnvironments.outputs.UnknownEnvironment == 1
        run: |
          $envName = '${{ steps.envName.outputs.envName }}'
          $secretName = ''
          $secrets = '${{ steps.ReadSecrets.outputs.Secrets }}' | ConvertFrom-Json
          $authContext = $null
          "$($envName)-AuthContext", "$($envName)_AuthContext", "AuthContext" | ForEach-Object {
            if (!($authContext)) {
              if ($secrets."$_") {
                Write-Host "Using $_ secret as AuthContext"
                $authContext = $secrets."$_"
                $secretName = $_
              }
            }
          }
          if ($authContext) {
            Write-Host "AuthContext provided in secret $secretName!"
            Set-Content -Path $ENV:GITHUB_STEP_SUMMARY -value "AuthContext was provided in a secret called $secretName. Using this information for authentication."
          }
          else {
            Write-Host "No AuthContext provided for $envName, initiating Device Code flow"
            $ALGoHelperPath = "$([System.IO.Path]::GetTempFileName()).ps1"
            $webClient = New-Object System.Net.WebClient
            $webClient.DownloadFile('https://raw.githubusercontent.com/andersgMSFT/AL-Go-Actions/PPP/AL-Go-Helper.ps1', $ALGoHelperPath)
            . $ALGoHelperPath
            DownloadAndImportBcContainerHelper
            $authContext = New-BcAuthContext -includeDeviceLogin -deviceLoginTimeout ([TimeSpan]::FromSeconds(0))
            Set-Content -Path $ENV:GITHUB_STEP_SUMMARY -value "AL-Go needs access to the Business Central Environment $('${{ steps.envName.outputs.envName }}'.Split(' ')[0]) and could not locate a secret called ${{ steps.envName.outputs.envName }}_AuthContext`n`n$($authContext.message)"
            Add-Content -Encoding UTF8 -Path $env:GITHUB_OUTPUT -Value "deviceCode=$($authContext.deviceCode)"
          }

  Deploy:
    needs: [ Initialization ]
    if: needs.Initialization.outputs.environmentCount > 0
    strategy: ${{ fromJson(needs.Initialization.outputs.environmentsMatrixJson) }}
    runs-on: ${{ fromJson(matrix.os) }}
    name: Deploy to ${{ matrix.environment }}
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.Deploy.outputs.environmentUrl }}
    env:
      deviceCode: ${{ needs.Initialization.outputs.deviceCode }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: EnvName
        id: envName
        run: |
          $errorActionPreference = "Stop"; $ProgressPreference = "SilentlyContinue"; Set-StrictMode -Version 2.0
          $envName = '${{ matrix.environment }}'.split(' ')[0]
          Add-Content -Encoding UTF8 -Path $env:GITHUB_OUTPUT -Value "envName=$envName"

      - name: Read settings
        uses: andersgMSFT/AL-Go-Actions/ReadSettings@PPP
        with:
          shell: powershell
          get: type,powerPlatformSolutionFolder

      - name: Read secrets
        id: ReadSecrets
        uses: andersgMSFT/AL-Go-Actions/ReadSecrets@PPP
        with:
          shell: powershell
          gitHubSecrets: ${{ toJson(secrets) }}
          getSecrets: '${{ steps.envName.outputs.envName }}-AuthContext,${{ steps.envName.outputs.envName }}_AuthContext,AuthContext,${{ steps.envName.outputs.envName }}-EnvironmentName,${{ steps.envName.outputs.envName }}_EnvironmentName,EnvironmentName,projects'

      - name: Get Artifacts for deployment
        uses: andersgMSFT/AL-Go-Actions/GetArtifactsForDeployment@PPP
        with:
          shell: powershell
          artifactsVersion: ${{ github.event.inputs.appVersion }}
          artifactsFolder: '.artifacts'

      - name: Deploy AL
        id: Deploy
        uses: andersgMSFT/AL-Go-Actions/Deploy@PPP
        env:
          Secrets: '${{ steps.ReadSecrets.outputs.Secrets }}'
        with:
          shell: powershell
          environmentName: ${{ matrix.environment }}
          artifactsFolder: '.artifacts'
          type: 'Publish'
          deploymentEnvironmentsJson: ${{ needs.Initialization.outputs.deploymentEnvironmentsJson }}

      - name: Deploy PP
        if: env.type == 'PTE' && env.powerPlatformSolutionFolder != ''
        uses: andersgMSFT/AL-Go-Actions/DeployPowerPlatform@PPP
        env:
          Secrets: '${{ steps.ReadSecrets.outputs.Secrets }}'
        with:
          shell: powershell
          actionsRepo: 'andersgMSFT/AL-Go-Actions@PPP'
          environmentName: ${{ matrix.environment }}
          artifactsFolder: '.artifacts'
          deploymentEnvironmentsJson: ${{ needs.Initialization.outputs.deploymentEnvironmentsJson }}

  PostProcess:
    needs: [ Initialization, Deploy ]
    if: always()
    runs-on: [ windows-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Finalize the workflow
        id: PostProcess
        uses: andersgMSFT/AL-Go-Actions/WorkflowPostProcess@PPP
        with:
          shell: powershell
          eventId: "DO0097"
          telemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
